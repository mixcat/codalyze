


byte[][] matrix = Matrix.build(H.getRows(),H.getCols());
byte[] all = Matrix.flatten(matrix, H.getRows(), H.getCols() );
byte[] line(int i, int j, Direction dir, int len) {
	return Matrix.line(matrix, i, j, dir, len);
}

byte[] square(int i, int j, int len) {
	return Matrix.square(matrix, i, j, len);
}

int[] seq(int len) {
	int[] rt = new int[len];
	for (int i = 0; i < rt.length; rt[i] = i++);
	return rt;
}

byte[] inv(byte[] in) {
	byte[] rt = new byte[in.length];
	for (int i=0; i<rt.length; i++) {
		rt[i] = in[in.length-1-i];
	}
	return rt;
} 

sleep(int sleep) {
	try {
		Thread.sleep(sleep);
	} catch(InterruptedException ex) {
		throw new RuntimeException("Interrupted");
	}
}


////// SAMPLES ///////


quadrants_4_16() {
	return new byte[][] {
		square(0,0,2),
		square(2,0,2),
		square(0,2,2),
		square(2,2,2)
	};
}
	
test = "W(C(0, Fblack)); W(REC); W(C(1,Fred)); W(C(2,Fgreen)); W(C(3,Fblue)); W(C(4, Fgreen)); W(REC); W(PLAY);";
ALL = new byte[16];
for(i:seq(16)) { ALL[i] = (byte)(i+1); }

		
/*
Script tst = new Script()
		.l(Commands.fadeToRGB(Color.red))
		.l(Commands.fadeToRGB(Color.green))
		.l(Commands.fadeToRGB(Color.blue));
	
Script rbw = new Script()
		.l(Commands.fadeToRGB(Color.red))
		.l(Commands.fadeToRGB(Color.orange))
		.l(Commands.fadeToRGB(Color.yellow))
		.l(Commands.fadeToRGB(Color.green))
		.l(Commands.fadeToRGB(Color.blue))
		.l(Commands.fadeToRGB(new Color(75, 0, 130)))
		.l(Commands.fadeToRGB(new Color(238, 130, 238)));
*/

source("src/main/resources/console/shortcuts.bsh");
source("src/main/resources/console/serial.bsh");
source("src/main/resources/console/effects.bsh");