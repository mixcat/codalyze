
carz(n, delay, delay2) {
	A = quadrants_4_16();
	C = col(4);
	for (i:seq(40)) { 
	 for (j:seq(A.length)) {
		 for(z:seq(A.length)) {
			 idxA = ((j+i+z)%A.length);
			 idxC = (j+z)%A.length;
			 W( A[idxA], goToRGB(C[idxC]), 0 );
		 } 
	}
	sleep(100);
	}
}

col(n) {
	C = new Color[n];
	for(i=1; i<n; i++) { C[i] = black; }
	C[0] = red;
	return C;
}

car(A, n, delay, delay2, Color[] C) {
	C = col(A.length);
	 for (int i:seq(n)) { 
		 for (int j:seq(A.length)) {
			 for(int z:seq(A.length)) {
				 W( A[((j+i+z)%A.length)], fadeToRGB(C[(j+z)%A.length]), 0 );
			 } 
		}
		sleep(delay);
	 }
}

carx(A, n, delay, delay2, Color[] C) {
	A = square(0,0,4);
	C = col(A.length);
	n=10;
	 for (int i:seq(n)) { 
		 for (int j:seq(A.length)) {
				W( A[((j+i)%A.length)], fadeToRGB(C[(j)%A.length]), 0 );
				sleep(50);
				W( A[((j+i)%A.length)], fadeToRGB(C[(j+1)%A.length]), 0 );
		}
		//sleep(20);
	 }
}

carf() {
	A = square(0,0,4);
	C = col(A.length);
	n=60;
	for (i:seq(n)) { 
		W( A[(i%A.length)], Gred, 200); 
		W( A[(i%A.length)], Gblue, 100); 
	 }
}

card() {
	A = square(0,0,4);
	B = square(1,1,2);
	C = col(A.length);
	n=60;
	W(0, Gblack);
	for (i:seq(n)) { 
		W( A[i%A.length], Gred, 0);
		W( B[(B.length-1)-i%B.length], Gred, 200);
		W( B[(B.length-1)-i%B.length], Gblack, 0);
		W( A[i%A.length], Gblack, 100); 
	 }
}

	carm() { //broken
		A = square(0,0,4);
		B = square(1,1,2);
		C = col(A.length);
		n=60;
		W(0, Gblack);
		X = new byte[][] { Fred, Fblue, Fwhite, Fgreen, Fred, Fblue, Fblack, Fred, Fblue, Fwhite, Fgreen, Fred, Fblue, Fblack, Fred, Fblue, Fwhite, Fgreen, Fred, Fblue, Fblack, Fred, Fblue, Fwhite, Fgreen, Fred, Fblue, Fblack, Fred, Fblue, Fwhite, Fgreen, Fred, Fblue, Fblack };
		for (i:seq(X.length*10)) {
			W( A[i%A.length], X[i/A.length], 0);
			W( B[(B.length-1)-i%B.length], X[i/X.length], 200);
			W( B[(B.length-1)-i%B.length], X[(i/X.length)+1], 0);
			W( A[i%A.length], X[(i/A.length)+1], 100); 
		 }
	}

carn() {
	A = square(0,0,4);
	B = square(1,1,2);
	C = col(A.length);
	n=60;
	W(0, Gblack);
	X = new byte[][] { Fblack, Fblue, Fblack, Fred, Fgreen };
	for (i:seq(A.length*(X.length-1))) {
		W( A[i%A.length], X[i/A.length], 0);
		W( A[i%A.length], X[(i/A.length)+1], 100); 
		if ((i+1)%A.length==0) {
			W(B, X[(i/A.length)], 0);
		}
	 }
}

caro() {
	Q = quadrants_4_16();
	W(0, Gblack);
	X = new byte[][] { Fblack, Fblue, Fblack, Fred, Fgreen };
	for (i:seq(4*(X.length-1))) { 
		W( Q[0][i%4], X[i/4], 0);
		W( Q[1][i%4], X[i/4], 0);
		W( Q[2][i%4], X[i/4], 0);
		W( Q[3][i%4], X[i/4], 100);
		W( Q[0][i%4], X[(i/4)+1], 0); 
		W( Q[1][i%4], X[(i/4)+1], 0); 
		W( Q[2][i%4], X[(i/4)+1], 0); 
		W( Q[3][i%4], X[(i/4)+1], 100); 
	 }
}

carp() {
	Q = quadrants_4_16();
	W(0, Gblack);
	Q0 = new byte[][] { Fblack, Fblue, Fblack, Fred, Fgreen };
	Q1 = new byte[][] { Fblue, Fblack, Fred, Fgreen, Fblack };
	Q2 = new byte[][] { Fblack, Fred, Fgreen, Fblack, Fblue };
	Q3 = new byte[][] {  Fred, Fgreen, Fblack, Fblue, Fblack };
	for (i:seq(4*(X.length-1))) { 
		W( Q[0][i%4], Q0[i/4], 0);
		W( Q[1][i%4], Q1[i/4], 0);
		W( Q[2][i%4], Q2[i/4], 0);
		W( Q[3][i%4], Q3[i/4], 100);
		W( Q[0][i%4], Q0[(i/4)+1], 0); 
		W( Q[1][i%4], Q1[(i/4)+1], 0); 
		W( Q[2][i%4], Q2[(i/4)+1], 0); 
		W( Q[3][i%4], Q3[(i/4)+1], 100); 
	 }
}

carq() {
	A = square(0,0,3);
	B = square(1,1,3);
	C = col(A.length);
	n=60;
	W(0, Gblack);
	X = new byte[][] { Fblack, Fblue, Fblack, Fred, Fgreen };
	for (i:seq(A.length*(X.length-1))) {
		W( A[i%A.length], X[i/A.length], 0);
		W( A[i%A.length], X[(i/A.length)+1], 100); 
		if ((i+1)%A.length==0) {
			W(B, X[(i/A.length)], 0);
		}
	 }
}

carr() {
	A = square(0,0,3);
	B = inv(square(1,1,3));
	C = col(A.length);
	n=60;
	W(0, Gblack);
	X = new byte[][] { Fred, Fblue, Fred, Fblue, Fred };
	Y = new byte[][] { Fgreen, Forange, Fgreen, Forange, Fgreen };
	for (i:seq(A.length*(X.length-1))) {
		W( A[i%A.length], X[i/A.length], 0);
		W( B[i%B.length], Y[i/B.length], 0);
		W( A[i%A.length], X[(i/A.length)+1], 100); 
		W( B[i%B.length], Y[(i/B.length)+1], 100); 
	 }
}

cars() {
	A=square(0,0,4);
	B=square(1,1,2);
	C=merge(A,B);
	W(0, Gblack);
	for(i:seq(10)) {
		for(a:C) {
			W(a, Fred, 100);
		}
		for(a:inv(C)) {
			W(a, Fblue, 100);
		}
		C=shift(C);
	}
}

cart() {
	A=square(0,0,4);
	B=square(1,1,2);
	C=merge(A,B);
	W(0, Gblack);
	X = new byte[][] { Gwhite, Gred, Gblue, Gyellow, Gblack };
	for(i:seq(3)) {
		for(a:C) {
			W(a, X[i%3], 300);
			W( a, X[(i+1)%3], 0);
		}
		for(a:inv(C)) {
			W(a, X[(i+3)%3], 100);
			W(a, X[(i+4)%3], 100);
		}
	}
}

caru() {
	A=square(0,0,4);
	B=square(1,1,2);
	C=shift(B,1);
	D=shift(inv(A),4);
	C=merge(merge(A,B), merge(C,D));
	print(C.length);
	W(0, Gblack);
	X = new byte[][] { Gwhite, Gred, Gblue, Gyellow, Gblack };
	for(i:seq(3)) {
		pos = 0;
		for(a:C) {
			if (a==B[B.length-1]) pos=1;
			W(a, X[(i+pos)%3], 300);
		}
		//for(a:inv(C)) {
		//	W(a, X[(i+3)%3], 100);
			//W(a, X[(i+4)%3], 100);
		//}
	}
}

mana() {
	A = square(0,0,3);
	B = square(0,1,3);
	C = square(1,0,3);
	D = square(1,1,3);
	X = new byte[][] { Gwhite, Gred, Gblue, Gyellow, goToRGB(magenta) };
	for (i:seq(A.length*4)) {
		W(A, X[i%X.length], 50);
		W(B, X[(i+1)%X.length], 50);
		W(C, X[(i+2)%X.length], 50);
		W(D, X[(i+3)%X.length], 50);
	}
}

manb() {
	A = square(0,0,3);
	B = square(0,1,3);
	C = square(1,0,3);
	D = square(1,1,3);
	X = new byte[][] { Gwhite, Gred, Gblue, Gyellow, goToRGB(magenta) };
	W(0, Gblack);
	for (i:seq(A.length*4)) {
		W(A, X[i%X.length], 0);
		sleep(500);
		W(B, X[(i+1)%X.length], 0);
		sleep(500);
		W(C, X[(i+2)%X.length], 0);
		sleep(500);
		W(D, X[(i+3)%X.length], 0);
		sleep(500);
	}
}

concentric_blink16() {
	S = square(0,0,4);
	s = square(1,1,2);
	C = col(2);
	for (i:seq(30)) { W(S, fadeToRGB(C[i%2]),0); W(s, fadeToRGB(C[1-(i%2)]),0); sleep(500); }
}

surr(int s) { return new int[] {s-11, s-10, s-9, s-1, s+1, s+9, s+10, s+11}; }



life() {

	//for( i:seq(100)) { W(i+1, fadeToRGB(cols[i])); };

	col = new byte[] {
		0,0,0,
		1,0,0,
		0,1,0,
		1,1,0,
		0,0,1,
		1,0,1,
		0,1,1,
		1,1,1
	};

	coz = new Color[8]; for (i=0; i<col.length; i+=3) { coz[i/3] = new Color(col[i]*255, col[i+1]*255, col[i+2]*255); print(i + " " + col[i%3+3]); }

	cols = new Color[100];
	for(i:seq(100)) cols[i] = black;
	cols[15] = red;
	cols[16] = green;
	cols[25] = blue;
	
	cols[45] = white;
	cols[46] = white;

	for( i:seq(100)) { W((byte)(i+1), goToRGB(cols[i])); };
	
	sleep(1000);
	
	n=0;
	while(n++<20) {
	
	ncols = new Color[100];
	for (v:seq(100)) ncols[v] = cols[v];
	for(i=0;i<100;i++) {
		S = surr(i);
		RGB = new int[3];
		c=0;
		for (s:S) {
			if(s<0 || s>99 || cols[s].equals(black)) continue;
			c += cols[s].getRed() + cols[s].getGreen() + cols[s].getBlue();
			RGB[0] = (((RGB[0] + cols[s].getRed())/255)%2)*255;
			RGB[1] = (((RGB[1] + cols[s].getGreen())/255)%2)*255;
			RGB[2] = (((RGB[2] + cols[s].getBlue())/255)%2)*255;
		}
		ncols[i] = (c > 500 && c<2000) ? new Color(RGB[0], RGB[1], RGB[2]) : black;
		if (c>0 && ncols[i].equals(black)) print(c + " " + new Color(R/8, G/8, B/8));
	}
	for (v:seq(100)) cols[v] = ncols[v];
	
	blacks = 0;	
	for( i:seq(100)) { W(i+1, fadeToRGB(cols[i])); blacks += (cols[i].equals(black)) ? 0 : 1;};
	sleep(1000);
	print("--------");
	if (blacks == 0) break;
	}
	
}

rnd_color() {
	return new Color( (int)(Math.random()*255), (int)(Math.random()*255) , (int)(Math.random()*255));
}

jk_life() {

	cols = new Color[100];
	ncols = new Color[100];
	for(i:seq(100)) cols[i] = black;
	
	setup = new int[] {
		3,	4,
		11,	14,
		21,	22, 24, 26, 27,
		32, 34, 37,
		42, 47, 49, 50,
		53, 54, 55, 57, 59, 60,
		66,
		75,
		85, 86		
	};
	
	for (st:setup) {
		cols[st-1] = white;//rnd_color();
		print(cols[st-1]);
	}

	for( i:seq(100)) { W((byte)(i+1), goToRGB(cols[i])); };
	sleep(1000);
	
	n=0;
	while(n++<1000) {
	
		for (v:seq(100)) ncols[v] = cols[v];
	
		for(i=0;i<100;i++) {
			scol = 0;
			for (s:surr(i)) {
				if(s<0 || s>99) continue;
				scol += ((cols[s].getRed() + cols[s].getGreen() + cols[s].getBlue())>0) ? 1 : 0;
			}
			icol = cols[i].getRed() + cols[i].getGreen() + cols[i].getBlue();
			
			if (icol == 0 && scol == 3) {
				ncols[i] = rnd_color();
			}
			else if (icol > 0 && (scol < 2 || scol > 3)) {
				ncols[i] = black;
			}
		}
		for (v:seq(100)) cols[v] = ncols[v];
		
		blacks = 0;	
		for( i:seq(100)) { W(i+1, fadeToRGB(cols[i])); blacks += (cols[i].equals(black)) ? 0 : 1;};
		sleep(100);
		print("--------");
		if (blacks == 0) break;
	}
	
}

testFuck() {
	for(i:seq(60)) {
		switch(i%2) {
			case 0: W(0, Gred); break;
			case 1: W(0, Gblue); break;
		}
		H.readSerial();
		sleep(200);
	}
}

testRGB() {
	for (i:seq(60)) {
		switch(i%4) {
			case 0:
				W(0, Gblack);
			break;
			case 1:
				W(0, Gred);
			break;
			case 2:
				W(0, Gblack);
			break;
			case 3:
				W(0, Ggreen);
			break;
		}
		H.readSerial();
		System.out.println("-----");
		sleep(1000);
	}
	
	
}


